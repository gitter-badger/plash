#!/usr/bin/env python3
#
# usage: plash map KEY [CONTAINER]
# Get or set a container by a key. Empty container to delete a key.

import sys
import os
from os.path import join
from tempfile import mkdtemp

from plashlib.utils import catch_and_die, die_with_usage, handle_help_flag, nodepath_or_die, get_plash_data
from plashlib import ux

handle_help_flag()
ux.assert_initialized()

plash_data = get_plash_data()

try:
    key = sys.argv[1]
except IndexError:
    die_with_usage()

try:
    value = sys.argv[2]
except IndexError:
    value = None


def cache_set(cache_key, container_id):
    nodepath = nodepath_or_die(container_id)
    with catch_and_die([OSError], debug='mkdtemp'):
        tmpdir = mkdtemp(dir=join(plash_data, 'tmp'))
        os.symlink(nodepath, join(tmpdir, 'link'))

        # rename will overwrite atomically the cache key if it already exists,
        # just symlink would not
        os.rename(
            join(tmpdir, 'link'), join(plash_data, 'cache_keys', cache_key))


def cache_rm(cache_key):
    try:
        with catch_and_die([OSError], debug='unlink'):
            os.unlink(join(plash_data, 'cache_keys', cache_key))
        return True
    except FileNotFoundError:
        return False


def cache_get(cache_key):
    try:
        nodepath = os.readlink(join(plash_data, 'cache_keys', cache_key))
    except FileNotFoundError:
        return
    if os.path.exists(nodepath):
        return os.path.basename(nodepath)


if value == '':
    cache_rm(key)
elif value is None:
    cont = cache_get(key)
    if cont:
        print(cont)
else:
    cache_set(key, value)
