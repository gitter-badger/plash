#!/usr/bin/env python3
#
# usage: plash-create CONTAINER [CMD1 [CMD2 ...]]
#
# Creates a new container from a command. If no command is passed, a shell is
# started.  The new container is printed to stdout, all other output goes to
# stderr. Note that a new container is only returned if the build command
# returns 0 (success) as exit code.  For most cases use `plash build` for a
# higher level interface.
#
#
# Examples:
#
# $ plash-create 7 ./buildscript.sh
# 42
#
# $ sudo plash-create 3
# /home/fulano # echo 'hello' > /file
# /home/fulano # exit 0
# 71
#
# $ plash-create -i ubuntu -- touch /myfile
# 44

import os
import subprocess
import sys
from os.path import join
from plashlib import ux
from plashlib.utils import get_plash_data
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)
from sys import exit
from tempfile import mkdtemp

from plashlib.utils import die, die_with_usage, handle_build_args, handle_help_flag, nodepath_or_die

ux.assert_initialized()
handle_help_flag()
handle_build_args()

plash_tmp = join(get_plash_data(), 'tmp')

try:
    container = sys.argv[1]
    cmd = sys.argv[2:]
except IndexError:
    die_with_usage()

if not container:
    die('container arg can not be an empty string')

nodepath_or_die(container)

changesdir = mkdtemp(dir=plash_tmp, prefix='plash-create-changesdir-')
p = subprocess.Popen(
    [
        'plash-runopts',
        '--no-default-binds',
        '--bind', '/home',
        '--bind', '/etc/resolv.conf',
        '--bind', '/sys',
        '--bind', '/dev',
        '--bind', '/proc',
        '--changes', changesdir,
        '--',
        container,
    ] + cmd,
    stdout=2
)  # redirect stdout to stderr because we are passing the container id through stdout

exit = p.wait()
if exit:
    die("building returned exit status {}".format(exit), exit=4)

os.execlp('plash-add-layer', 'plash-add-layer', container, os.path.join(changesdir, 'data'))
