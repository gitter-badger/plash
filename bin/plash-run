#!/usr/bin/env python3
#
# usage: plash-run CONTAINER [--upperdir-workdir-pair WORKDIR UPPERDIR] [CMD1 [CMD2 [CMD3 ...]]
# Run a command inside a container. If no command is specified a shell is
# started.  The workdir and upperdir parameters can be used to save file system
# changes made inside the container.

import os
import sys
from time import sleep
import tempfile
import signal
from os.path import join, isdir
from shutil import rmtree
from subprocess import CalledProcessError, call, check_call

from plashlib.utils import catch_and_die, deescalate_sudo, die, die_with_usage, handle_help_flag, handle_build_args, get_default_shell
from plashlib import ux

PLASH_TMP = join(os.environ.get('PLASH_DATA', '/var/lib/plash'), 'tmp')
MOUNTPOINT_DIR = '/tmp'
handle_help_flag()
handle_build_args()
ux.assert_initialized()

#
# parse arguments
#
workdir = None
upperdir = None
try:
    container, *args = sys.argv[1:]
    while args:
        cmd = args.pop(0)
        if cmd == '--':
            break
        if not cmd.startswith('-'):
            args.insert(0, cmd)
            break
        if cmd == '--upperdir-workdir-pair':
            upperdir, workdir = args.pop(0), args.pop(0)
        else:
            die_with_usage(hint='unknown flag: {}'.format(cmd))
    cmd = args
except (IndexError, ValueError):
    die_with_usage()

main_pid = os.getpid()
if not upperdir or not workdir:
    upperdir = tempfile.mkdtemp(
        dir=PLASH_TMP, prefix='upperdir-{}-'.format(main_pid))
    workdir = tempfile.mkdtemp(
        dir=PLASH_TMP, prefix='workdir-{}-'.format(main_pid))

# fail here instead of inside plash-mount for nicer error message
ux.assert_container_exists(container)

mountpoint = tempfile.mkdtemp(
    dir=MOUNTPOINT_DIR, prefix='plash-run-{}-'.format(main_pid))

with catch_and_die([CalledProcessError]):
    check_call([
        'plash-mount', container, '--upperdir', upperdir, '--workdir', workdir,
        mountpoint
    ])

if not cmd:
    default_root_shell = get_default_shell(join(mountpoint, 'etc/passwd'))
    cmd = [default_root_shell]


os.environ['PROOT_NO_SECCOMP'] = '1' # figure out more about this
os.execlp('proot', 'proot', '-0', '-r', mountpoint, '-b', '/home', '-b', '/proc', '-b', '/etc/resolv.conf', '-b', '/tmp', '-b', '/dev', *cmd)
