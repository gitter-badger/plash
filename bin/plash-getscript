#!/usr/bin/env python3
#
# usage: plash-getscript <ACTIONS>
# Prints build script. It prints the shell script generated from actions passed
# as command line parameters.  Call with --help to see available actions.
# plash-build passes its arguments to this script to generate the shell script
# with the build instruction.

import sys

from plashlib import eval, stdlib
from plashlib.utils import catch_and_die, deescalate_sudo, die

# try not to be root
deescalate_sudo()

tokens = sys.argv[1:]

lsp = []
for token in tokens:
    if token == '--':
        die('invalid option: --')
    elif token.startswith('--'):
        lsp.append([token[2:]])
    elif token.startswith('-'):
        if not len(token) == 2:
            die('invalid option: {}'.format(token))
        lsp.append([token[1:]])
    elif token:
        lsp[-1].append(token)

with catch_and_die([eval.ActionNotFoundError]):
    script = eval.eval(lsp)
if script:
    script += '\n'  # that '\n' is right
print(script, end='')
