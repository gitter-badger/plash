#!/usr/bin/env python3
#
# usage: plash-add-layer PARENT-CONTAINER IMPORT-DIR
# Stack a layer on top of a container.  Please note that it uses the rename
# syscall, this means your IMPORT-DIR will be moved into the plash data
# directory.  The container "0" is the empty root container, use that to start
# a container from scratch.
#
#
# Examples:
#
# Create a container from a complete root file system:
# $ plash-add-layer 0 /tmp/rootfs
# 66
#
# Add a new layer on top of an existing container:
# $ plash-add-layer 33 /tmp/mylayer
# 67

from tempfile import mkdtemp
import os
import sys
from plashlib.utils import die_with_usage, handle_build_args, handle_help_flag, nodepath_or_die, get_plash_data
from os.path import join

handle_help_flag()
handle_build_args()

plash_data = get_plash_data()

try:
    base_container = sys.argv[1]
    import_dir = sys.argv[2]
except IndexError:
    die_with_usage()

#
#  get a new id
#
with open(join(plash_data, 'id_counter'), 'a') as f:
    f.write('A')
    node_id = str(f.tell())

#
# the location where to put the node, which will contain the layer dir
#
new_node_path = join(nodepath_or_die(base_container), node_id)

#
#  prepare the node with the dir being imported
#  this is the payload data we want to put in the builds folder later
#
prepared_new_node = mkdtemp(dir=join(plash_data, 'tmp'))
# other users can see the build tree
os.chmod(prepared_new_node, 0o755)
# but other users can not see the layer data
os.mkdir(join(prepared_new_node, '_data'), 0o700)

# the next line will actually make the import_dir "disappear" for the user.
# the "root" folder will hold the access rights, user rights and maybe other meta
# data for the root folder ('/' after a chroot)
os.rename(import_dir, join(prepared_new_node, '_data', 'root'))

#
#  Register that we are using this new_node_path,
#  so it does not gets lost in the 'build' folder tree if this program crashes.
#  And actually also tries to find a shorter, nicer version of this id.
#
os.symlink(new_node_path, join(plash_data, 'index', node_id))

#
#  put our new node with the import directory in the builds folder
#  with this we are so to speak saving the "real data"
#
os.rename(prepared_new_node, new_node_path)

#
#  inform the user about the new container
#
print(node_id)
