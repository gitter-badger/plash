#!/usr/bin/env python3
#
# usage: plash-mount CONTAINER MOUNTPOINT [CHANGESDIR]
# Mounts the filsystem of a container. To cleanup, unmout it with the `umount` command.
# The optional arguments are options passed to the overlay filesystem program:
# `upperdir` will include any changes made on the mountpoint, `workdir` is used internally by the overlay programm and must be located in the same file system device than `upperdir`.

import argparse
import os
from os.path import join
from subprocess import CalledProcessError, check_call

from plashlib.utils import catch_and_die, nodepath_or_die, handle_build_args, handle_help_flag, die, get_plash_data, die_with_usage
from plashlib import ux
import platform

handle_help_flag()
handle_build_args()
ux.assert_initialized()


try:
    container, mountpoint = sys.argv[1:2]
    changedir = sys.argv[2:3]
except ValueError:
    die_with_usage()

nodepath_or_die(container)

# TODO have this line more generic
if arg and not changedir.replace('.', '').replace('/', '').replace(
        '_', '').replace('-', '').isalnum():
    die('cowardly dying: bad char(s) in overlayfs arg: {}'.format(changedir))


container_ids_path = []
parts = nodepath.split('/')
while True:
    pop = parts.pop()
    container_ids_path.append(pop)
    if pop == '0':
        break

# use the symlinks and not the full paths because the arg size is limited
# On my setup i get 58 (EDIT: should be more now) layers before an error,
# we could have multiple mount calls to overcome this
plash_data = get_plash_data()
lowerdir_list = [
    join(plash_data, 'index', i, '_data', 'root') for i in container_ids_path
]

def mount_unionfs(lowerdir_list, mountpoint, changedir):
    upperdir = os.path.join(upperdir, 'changes')
    os.mkdir(upperdir)
    lowerdirs_str = ':'.join('{}=RO'.format(i) for i in lowerdir_list)
    if upperdir:
        upperdir_str = '{}=RW:'.format(upperdir)
    else:
        upperdir_str = ''
    try:
        with catch_and_die([CalledProcessError]):
            check_call([
                'unionfs',
                '-o',
                'nosuid,cow',
                '{upperdir}{lowerdirs}'.format(
                lowerdirs=lowerdirs_str, upperdir=upperdir_str),
                mountpoint])
    except FileNotFoundError as exc:
        die('{} (HINT: install unionfs-fuse and proot)'.format(exc))

def mount_overlay(lowerdirs_list, mountpoint, changedir):
    workdir = os.path.join(changedir, 'work')
    upperdir = os.path.join(upperdir, 'changes')
    os.mkdir(workdir)
    os.mkdir(upperdir)
    with catch_and_die([CalledProcessError]):
        check_call([
            'mount', '-t', 'overlay', 'overlay', '-o',
            'lowerdir={lowerdir}{workdir}{upperdir},nosuid'.format(
                lowerdir=':'.join(lowerdir_list),
                upperdir=',upperdir=' + upperdir if upperdir else '',
                workdir=',workdir=' + workdir if workdir else ''),
	 	mountpoint
	])
    
#if not os.getuid() and platform.system() == 'Linux':
if False:
    # overlay is only in the Linux kernel and accesible by root
    mount_overlay(lowerdir_list, mountpoint, changedir)
else:
    # unionfs is fuse based and available in Linux, Mac and FreeBSD
    mount_unionfs(lowerdir_list, args.mountpoint, changedir)
