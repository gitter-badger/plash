#!/usr/bin/env python3
#
# usage: plash-noroot CMD

import os
from time import sleep
import sys
import signal
from subprocess import check_call, CalledProcessError
from plashlib.utils import catch_and_die
import tempfile
from getpass import getuser


user_setup_cmd = os.environ.get('PLASH_ROOTLESS_SETUP_CMD')

def get_subs(query_user, subfile):
    'get subuids or subgids for a user'
    with open(subfile) as f:
        read = f.readline()
        user, start, count = read.split(':')
        if user == query_user:
            return int(start), int(count)
    die('blah blah not sub(g|u)id found')

uid_start, uid_count = get_subs(getuser(), '/etc/subuid')
gid_start, gid_count = get_subs(getuser(), '/etc/subgid')

setup_cmds = []
# setup uid mapping
setup_cmds.append([
'newuidmap',
str(os.getpid()),
'0', str(os.getuid()), '1',
'1', str(uid_start), str(uid_count)])

# setup guid mapping
setup_cmds.append([
'newgidmap',
str(os.getpid()),
'0', str(os.getgid()), '1',
'1', str(gid_start), str(gid_count)])

if user_setup_cmd:
    setup_cmds.append(['sh', '-c', user_setup_cmd])

tmp = tempfile.mkdtemp()
fifo_name = os.path.join(tmp, 'fifo')
os.mkfifo(fifo_name)

child = os.fork()
if not child:
    with open(fifo_name, 'r') as f:
        f.read()

    for cmd in setup_cmds:
        with catch_and_die([CalledProcessError], debug='forked child'):
            try:
                check_call(cmd)
            except CalledProcessError:
                with open(fifo_name, 'w') as f: # open and clone the file for sync
                    f.write('error')
                raise

    with open(fifo_name, 'w') as f: # open and clone the file for sync
        pass
    sys.exit(0)

SETUP_SCRIPT = '''
set -e
fifo=$1; shift
echo "" > "$fifo"; status=$(cat "$fifo")
test "$status" != "error" && exec "$@"'''


run = [
    'sh',
    '-c',
    SETUP_SCRIPT,
    '--',
    fifo_name] + sys.argv[1:]

if not os.environ.get('PLASH_NO_CTYPES'):
    # what the unshare binary does do
    import ctypes
    CLONE_NEWNS = 0x00020000
    CLONE_NEWUSER = 0x10000000
    MS_REC = 0x4000
    MS_PRIVATE = 1<<18
    libc = ctypes.CDLL('libc.so.6')
    libc.unshare(CLONE_NEWNS | CLONE_NEWUSER)
    libc.mount("none", "/", None, MS_REC|MS_PRIVATE, None)
    os.execlp('sh', *run)
else:
    os.execlp(
    'unshare',
    'unshare',
    '--user',
    '--mount',
    *run)
